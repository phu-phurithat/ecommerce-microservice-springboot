services:
  mysql:
    container_name: mysql
    image: mysql
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - microservices-net
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_PASSWORD=root
    restart: unless-stopped

  phpmyadmin:
    container_name: phpmyadmin
    image: phpmyadmin/phpmyadmin
    environment:
      - PMA_HOST=mysql
      - PMA_USER=root
      - PMA_PASSWORD=root
    ports:
      - "8080:80"
    networks:
      - microservices-net
    restart: unless-stopped

  mongodb:
    container_name: mongodb
    image: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongodb:/data/db
    networks:
      - microservices-net
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
    restart: unless-stopped

  mongo-express:
    container_name: ms-mongo-express
    image: mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=root
      - ME_CONFIG_MONGODB_URL=mongodb://root:root@mongodb:27017/
    networks:
      - microservices-net
    restart: unless-stopped

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - microservices-net

  kafka:
    container_name: ms-kafka
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - microservices-net
    depends_on:
      - zookeeper

  mail-dev:
    container_name: ms-mail-dev
    image: maildev/maildev
    ports:
      - "1080:1080"
      - "1025:1025"
    networks:
      - microservices-net
  zipkin:
    container_name: ms-zipkin
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - microservices-net

  keycloak:
    container_name: ms-keycloak
    image: quay.io/keycloak/keycloak:latest
    ports:
      - "7080:7080"
      - "7443:7443"
    environment:
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 9098
      KC_HOSTNAME_STRICT_BACKCHANNEL: "true"
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: "true"
      KC_LOG_LEVEL: info
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7080/health/ready" ]
      interval: 15s
      timeout: 2s
      retries: 15
    command: [ "start-dev", "--http-port", "9098", "--https-port", "7443" ]
    networks:
      - microservices-net
  config-server:
    container_name: ms-config-server
    build:
      context: ./services/config-server
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 10s
      retries: 5
      start_period: 10s

  order-service:
    container_name: ms-order-service
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    networks:
      - microservices-net
    depends_on:
      - mysql
      - kafka
      - config-server
  product-service:
    container_name: ms-product-service
    build:
      context: ./services/product-service
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    networks:
      - microservices-net
    depends_on:
      - mysql
      - kafka
      - config-server
  customer-service:
    container_name: ms-customer-service
    build:
      context: ./services/customer-service
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    networks:
      - microservices-net
    depends_on:
      - mongodb
      - kafka
      - config-server
  payment-service:
    container_name: ms-payment-service
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    networks:
      - microservices-net
    depends_on:
      - mysql
      - kafka
      - config-server
  notification-service:
    container_name: ms-notification-service
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    networks:
      - microservices-net
    depends_on:
      - kafka
      - mongodb
      - config-server

  gateway:
    container_name: ms-gateway
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    networks:
      - microservices-net
    depends_on:
      - config-server

  eureka:
    container_name: ms-eureka
    build:
      context: ./services/discovery-service
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    networks:
      - microservices-net
    depends_on:
      - config-server


networks:
  microservices-net:
    driver: bridge

volumes:
  mysql_data:
  mongodb:
